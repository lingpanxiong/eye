# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
# 导入自定义的QComboBox类 & QDragTableWidget类
from .custom_qCombox_spinner import CustomComboBox
from .custom_qTableWidget_drag import DragTableWidget
from src.utils.decorator import CC_TimeDec


class Ui_MainWindow(object):
    """主窗口UI类"""
    @CC_TimeDec(tips="设置主窗口界面UI")
    def setupUi(self, MainWindow):
        """设置主窗口"""
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(964, 669)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setSizeIncrement(QtCore.QSize(3, 3))
        MainWindow.setIconSize(QtCore.QSize(60, 60))
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(False)

        """添加顶部菜单栏"""
        if False: # 移除菜单栏设置
            self.menubar = QtWidgets.QMenuBar(MainWindow)
            self.menubar.setGeometry(QtCore.QRect(0, 0, 964, 22))  # 设置菜单栏的位置和大小
            self.menubar.setObjectName("menubar")

            # 添加文件菜单
            self.fileMenu = self.menubar.addMenu("文件")
            # 添加文件菜单项
            self.openAction = QtWidgets.QAction("打开", MainWindow)
            self.fileMenu.addAction(self.openAction)
            self.saveAction = QtWidgets.QAction("保存", MainWindow)
            self.fileMenu.addAction(self.saveAction)
            self.exitAction = QtWidgets.QAction("退出", MainWindow)
            self.fileMenu.addAction(self.exitAction)
            MainWindow.setMenuBar(self.menubar)

        """添加底部状态栏""" 
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setSizeGripEnabled(False)
        self.statusbar.setStyleSheet("QStatusBar::item { border: none; }")
        self.statusbar.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        
        # 创建按钮
        self.statusbar_button1 = QtWidgets.QPushButton("🔆")
        self.statusbar_button1.setToolTip("设置")
        self.statusbar_button2 = QtWidgets.QPushButton("🚀版本(2.3.5)")

        # 创建标签
        self.statusbar_label1 = QtWidgets.QLabel()
        self.statusbar_label1.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)  # 设置为可扩展
        self.statusbar_label1.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)  # 设置右居中对齐
        self.statusbar_label1.setMinimumWidth(1)

        self.statusbar_label0 = QtWidgets.QLabel()
        self.statusbar_label0.setMinimumWidth(1)
        self.statusbar_label = QtWidgets.QLabel()
        self.statusbar_label.setMinimumWidth(1)


        # 正确添加组件的方式：注意，addWidget & addPermanentWidget 的区别
        self.statusbar.addWidget(self.statusbar_button1)           # 普通部件（左对齐）
        self.statusbar.addWidget(self.statusbar_button2)
        self.statusbar.addWidget(self.statusbar_label0)
        self.statusbar.addWidget(self.statusbar_label)
        self.statusbar.addPermanentWidget(self.statusbar_label1)  # 永久部件（右对齐）
        

        # 设置布局方向
        self.statusbar.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setStatusBar(self.statusbar)

        # 设置主窗口的主体
        self.main_body = QtWidgets.QWidget(MainWindow)
        self.main_body.setStyleSheet("")
        self.main_body.setObjectName("main_body")
        # 设置可扩展的大小策略
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.main_body.setSizePolicy(sizePolicy)
        # 允许 gridLayout 的子组件自由拉伸
        self.gridLayout = QtWidgets.QGridLayout(self.main_body)
        self.gridLayout.setObjectName("gridLayout")
        # self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        # self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        # 设置分割器
        self.splitter = QtWidgets.QSplitter(self.main_body)
        self.splitter.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        # 设置分割器不可折叠
        self.splitter.setChildrenCollapsible(False)
        self.splitter.setObjectName("splitter")

        """设置分割器左侧组件--磁盘显示self.Left_QGroupBox"""
        self.Left_QGroupBox = QtWidgets.QGroupBox(self.splitter)
        self.Left_QGroupBox.setMinimumSize(QtCore.QSize(0, 0))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.Left_QGroupBox.setSizePolicy(sizePolicy)  # 将大小策略应用到 QGroupBox
        self.Left_QGroupBox.setFlat(False)
        self.Left_QGroupBox.setCheckable(False)
        self.Left_QGroupBox.setObjectName("Left_QGroupBox")

        # 磁盘显示 里面套一个垂直layout1
        self.verticalLayout_left_1 = QtWidgets.QVBoxLayout(self.Left_QGroupBox)
        self.verticalLayout_left_1.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_left_1.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_left_1.setSpacing(5)
        self.verticalLayout_left_1.setObjectName("verticalLayout_left_1")

        # 垂直layout1 里面套一个QTreeView(pyqt中的类，用来显示树形结构的数据，展示文件系统、层级结构等)
        self.Left_QTreeView = QtWidgets.QTreeView(self.Left_QGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.Left_QTreeView.setSizePolicy(sizePolicy)
        self.Left_QTreeView.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Left_QTreeView.setObjectName("Left_QTreeView")

        # 磁盘显示 里面套一个QFrame框架容器
        self.Left_QFrame = QtWidgets.QFrame(self.Left_QGroupBox)
        self.Left_QFrame.setAutoFillBackground(False)
        self.Left_QFrame.setObjectName("Left_QFrame")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)  # 设置为可扩展
        self.Left_QFrame.setSizePolicy(sizePolicy)
        # QFrame框架容器 里面套一个垂直layout2
        self.verticalLayout_left_2 = QtWidgets.QVBoxLayout(self.Left_QFrame)
        self.verticalLayout_left_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_left_2.setObjectName("verticalLayout_left_2")

        # 设置标签存放图片视频预览
        self.preview_label = QtWidgets.QLabel("预览区域")
        self.preview_label.setFont(QtGui.QFont("JetBrains Mono", 12))
        self.preview_label.setStyleSheet("color: white;")
        self.preview_label.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_left_2.addWidget(self.preview_label)


        # 创建垂直分割器并添加组件，在self.Left_QTreeView和self.Left_QFrame之间添加一个垂直分割器
        self.vertical_splitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)
        self.vertical_splitter.addWidget(self.Left_QTreeView)
        self.vertical_splitter.addWidget(self.Left_QFrame)
        # self.vertical_splitter.setChildrenCollapsible(False)  # 禁止子部件折叠
        self.vertical_splitter.setHandleWidth(6)  # 设置分割条宽度

        # 调整布局结构
        self.verticalLayout_left_1.addWidget(self.vertical_splitter)
        # 设置分割器拉伸比例（保持原有比例）
        self.vertical_splitter.setStretchFactor(0, 10)
        self.vertical_splitter.setStretchFactor(1, 0)

        """设置分割器右侧组件"""
        self.Right_QFrame = QtWidgets.QFrame(self.splitter)
        self.Right_QFrame.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.Right_QFrame.setObjectName("Right_QFrame")
        # 设置右侧垂直layout
        self.Right_QVBoxLayout = QtWidgets.QVBoxLayout(self.Right_QFrame)
        self.Right_QVBoxLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.Right_QVBoxLayout.setContentsMargins(0, 0, 0, 0)
        self.Right_QVBoxLayout.setSpacing(0)
        self.Right_QVBoxLayout.setObjectName("Right_QVBoxLayout")


        """右侧控制界面"""
        self.Right_Top_QGroupBox = QtWidgets.QGroupBox(self.Right_QFrame)
        self.Right_Top_QGroupBox.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.Right_Top_QGroupBox.setObjectName("Right_Top_QGroupBox")

        # 控制界面 套一个水平layout1
        self.qhLayout_right_1 = QtWidgets.QHBoxLayout(self.Right_Top_QGroupBox)
        self.qhLayout_right_1.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.qhLayout_right_1.setContentsMargins(6, 5, 5, 5)
        self.qhLayout_right_1.setSpacing(5)
        self.qhLayout_right_1.setObjectName("qhLayout_right_1")

        # 垂直layout1 套一个 垂直layout
        self.RT_QVBoxLayout = QtWidgets.QVBoxLayout()
        self.RT_QVBoxLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.RT_QVBoxLayout.setObjectName("RT_QVBoxLayout")
        # 垂直layout1 再套一个 垂直layout2
        self.RT_QVBoxLayout2 = QtWidgets.QVBoxLayout()
        self.RT_QVBoxLayout2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.RT_QVBoxLayout2.setObjectName("RT_QVBoxLayout2")

        # 设置右侧第一行的 水平layout (被套在垂直layout self.RT_QVBoxLayout中)  
        self.RT_QHBoxLayout = QtWidgets.QHBoxLayout()
        self.RT_QHBoxLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.RT_QHBoxLayout.setSpacing(8)
        self.RT_QHBoxLayout.setObjectName("RT_QHBoxLayout1")

        # 右侧第一行带输入的下拉框
        self.RT_QComboBox = QtWidgets.QComboBox(self.Right_Top_QGroupBox)
        self.RT_QComboBox.setEditable(True)  # 设置 QComboBox 为可编辑状态
        self.RT_QComboBox.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.RT_QComboBox.setObjectName("RT_QComboBox")
        
        self.RT_Line1 = QtWidgets.QFrame(self.Right_Top_QGroupBox)
        self.RT_Line1.setFrameShape(QtWidgets.QFrame.VLine)
        self.RT_Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.RT_Line1.setObjectName("RT_Line1")
        
        # 清除按钮
        self.RT_QPushButton3 = QtWidgets.QPushButton(self.Right_Top_QGroupBox)
        self.RT_QPushButton3.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.RT_QPushButton3.setObjectName("RT_QPushButton3")
        
        # 设置右侧第二行的 水平layout
        self.RT_QHBoxLayout2 = QtWidgets.QHBoxLayout()
        self.RT_QHBoxLayout2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.RT_QHBoxLayout2.setSpacing(8)
        self.RT_QHBoxLayout2.setObjectName("RT_QHBoxLayout2")

        # 右侧第二行的四个下拉框
        self.RT_QComboBox0 = QtWidgets.QComboBox(self.Right_Top_QGroupBox)
        self.RT_QComboBox0.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # self.RT_QComboBox0.setMinimumSize(QtCore.QSize(0, 30))
        self.RT_QComboBox0.setObjectName("RT_QComboBox0")
        
        # 使用自定义的下拉框
        self.RT_QComboBox1 = CustomComboBox(self.Right_Top_QGroupBox)
        self.RT_QComboBox1.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # self.RT_QComboBox1.setMinimumSize(QtCore.QSize(0, 30))
        self.RT_QComboBox1.setObjectName("RT_QComboBox1")

        self.RT_QComboBox2 = QtWidgets.QComboBox(self.Right_Top_QGroupBox)
        self.RT_QComboBox2.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # self.RT_QComboBox2.setMinimumSize(QtCore.QSize(0, 30))
        self.RT_QComboBox2.setObjectName("RT_QComboBox2")
        
        self.RT_QComboBox3 = QtWidgets.QComboBox(self.Right_Top_QGroupBox)
        self.RT_QComboBox3.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # self.RT_QComboBox3.setMinimumSize(QtCore.QSize(0, 30))
        self.RT_QComboBox3.setObjectName("RT_QComboBox3")

        self.RT_QH2_line4 = QtWidgets.QFrame(self.Right_Top_QGroupBox)
        self.RT_QH2_line4.setFrameShape(QtWidgets.QFrame.VLine)
        self.RT_QH2_line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.RT_QH2_line4.setObjectName("RT_QH2_line4")
        
        # 对比按钮
        self.RT_QPushButton5 = QtWidgets.QPushButton(self.Right_Top_QGroupBox)
        self.RT_QPushButton5.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.RT_QPushButton5.setObjectName("RT_QPushButton5")
        
        # 设置右侧第一行的 水平layout的拉伸比例
        self.RT_QHBoxLayout.addWidget(self.RT_QComboBox)
        self.RT_QHBoxLayout.addWidget(self.RT_Line1)
        self.RT_QHBoxLayout.setStretch(0, 8)
        # self.RT_QHBoxLayout.setStretch(1, 1)
        
        # 设置右侧第二行的 水平layout 的拉伸比例
        self.RT_QHBoxLayout2.addWidget(self.RT_QComboBox0)
        self.RT_QHBoxLayout2.addWidget(self.RT_QComboBox1)
        self.RT_QHBoxLayout2.addWidget(self.RT_QComboBox2)
        self.RT_QHBoxLayout2.addWidget(self.RT_QComboBox3)
        self.RT_QHBoxLayout2.addWidget(self.RT_QH2_line4)

        self.RT_QHBoxLayout2.setStretch(0, 2)
        self.RT_QHBoxLayout2.setStretch(1, 2)
        self.RT_QHBoxLayout2.setStretch(2, 2)
        self.RT_QHBoxLayout2.setStretch(3, 2)
        # self.RT_QHBoxLayout2.setStretch(4, 1)
        
        # 设置垂直layout包括两个按钮
        self.RT_QVBoxLayout2.addWidget(self.RT_QPushButton3)
        self.RT_QVBoxLayout2.addWidget(self.RT_QPushButton5)

        # 设置右侧控制界面—--左侧垂直layout包含两个水平layout
        self.RT_QVBoxLayout.addLayout(self.RT_QHBoxLayout)
        self.RT_QVBoxLayout.addLayout(self.RT_QHBoxLayout2)
        
        # 设置右侧控制界面---水平layout包含两个垂直layout
        self.qhLayout_right_1.addLayout(self.RT_QVBoxLayout)
        self.qhLayout_right_1.addLayout(self.RT_QVBoxLayout2)
        self.qhLayout_right_1.setStretch(0, 10)
        self.qhLayout_right_1.setStretch(1, 1)

        # 设置右侧--大的垂直layout包含控制界面
        self.Right_QVBoxLayout.addWidget(self.Right_Top_QGroupBox)
        
        """右侧显示界面"""
        self.Right_Bottom_QGroupBox = QtWidgets.QGroupBox(self.Right_QFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.Right_Bottom_QGroupBox.setSizePolicy(sizePolicy)
        self.Right_Bottom_QGroupBox.setObjectName("Right_Bottom_QGroupBox")

        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.Right_Bottom_QGroupBox)
        self.verticalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_3.setContentsMargins(6, 5, 5, 5)
        self.verticalLayout_3.setSpacing(1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        # 右侧第三行的表格组件,设置自定义或者默认模式
        # self.RB_QTableWidget0 = QtWidgets.QTableWidget(self.Right_Bottom_QGroupBox)
        # 使用自定义的表格，支持拖拽事件
        if self.drag_flag:
            self.RB_QTableWidget0 = DragTableWidget(self)
            # 设置表格的主窗口引用
            self.RB_QTableWidget0.set_main_window(self)
        else:
            self.RB_QTableWidget0 = QtWidgets.QTableWidget(self.Right_Bottom_QGroupBox)

        self.RB_QTableWidget0.setObjectName("RB_QTableWidget0")
        self.verticalLayout_3.addWidget(self.RB_QTableWidget0)
        
        if False: # 移除显示界面的信息标签，迁移到底部状态栏中显示
            self.RB_Line1 = QtWidgets.QFrame(self.Right_Bottom_QGroupBox)
            self.RB_Line1.setFrameShape(QtWidgets.QFrame.VLine)
            self.RB_Line1.setFrameShadow(QtWidgets.QFrame.Sunken)
            self.RB_Line1.setObjectName("RB_Line1")
            self.verticalLayout_3.addWidget(self.RB_Line1)
            # 创建一个新的水平布局
            self.RB_HLayout = QtWidgets.QHBoxLayout()
            self.RB_HLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
            self.RB_HLayout.setObjectName("RB_HLayout")
            # 第一个右侧第五行Qlabel
            self.RB_Label1 = QtWidgets.QLabel()
            self.RB_Label1.setObjectName("RB_Label1")
            self.RB_Label1.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)  # 设置为可扩展
            self.RB_Label1.setStyleSheet("border: none;background-color: lightblue; border-radius:10px;")
            self.RB_Label1.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)  # 设置左居中对齐
            self.RB_HLayout.addWidget(self.RB_Label1)
            # 第二个右侧第五行Qlabel
            self.RB_Label2 = QtWidgets.QLabel()
            self.RB_Label2.setObjectName("RB_Label2")
            self.RB_Label2.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)  # 设置为可扩展
            self.RB_Label2.setStyleSheet("border: none;background-color: lightblue; border-radius:10px;")
            self.RB_Label2.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)  # 设置右居中对齐
            self.RB_HLayout.addWidget(self.RB_Label2)
            # 将水平布局添加到垂直布局中
            self.verticalLayout_3.addLayout(self.RB_HLayout)
            self.verticalLayout_3.setStretch(0, 10)


        # 设置右侧大的垂直layout--包含控制界面和显示界面
        self.Right_QVBoxLayout.addWidget(self.Right_Bottom_QGroupBox)
        self.Right_QVBoxLayout.setStretch(0, 2)
        self.Right_QVBoxLayout.setStretch(1, 24)

        self.Right_Bottom_QGroupBox.raise_()
        self.Right_Top_QGroupBox.raise_()

        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.main_body)

        self.splitter.setStretchFactor(0, 1)   # 设置左侧部件（Left_QGroupBox）的拉伸因子为1
        self.splitter.setStretchFactor(1, 2)   # 设置右侧部件（Right_QFrame）的拉伸因子为1

        # 设置分割器的初始大小比例
        self.splitter.setSizes([200, 600])     # 左侧组件初始宽度为300，右侧组件初始宽度为600

        # 设置左侧和右侧组件的最小大小
        self.Left_QGroupBox.setMinimumSize(200, 0)  # 左侧组件的最小宽度
        self.Right_QFrame.setMinimumSize(400, 0)    # 右侧组件的最小宽度

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Left_QGroupBox.setTitle(_translate("MainWindow", "磁盘显示"))        
        self.Right_Top_QGroupBox.setTitle(_translate("MainWindow", "控制界面"))
        self.RT_QPushButton3.setText(_translate("MainWindow", "清除"))
        self.RT_QPushButton5.setText(_translate("MainWindow", "对比"))
        # self.Right_Bottom_QGroupBox.setTitle(_translate("MainWindow", "显示界面")) # 移除组显示文字


    